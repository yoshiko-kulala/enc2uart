
encoder_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a4  080035a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035ac  080035ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  080035c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080035c0  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188c  00000000  00000000  0002a20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002c650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000153e9  00000000  00000000  0002d140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b6c  00000000  00000000  00042529  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087fb1  00000000  00000000  0004a095  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000313c  00000000  00000000  000d20c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800355c 	.word	0x0800355c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800355c 	.word	0x0800355c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Count2rpm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float pwm[4] = { 0 };
void Count2rpm() {
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	pwm[0] = TIM1->CNT - 30000;
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <Count2rpm+0x94>)
 80004da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004dc:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 80004e0:	3b30      	subs	r3, #48	; 0x30
 80004e2:	ee07 3a90 	vmov	s15, r3
 80004e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <Count2rpm+0x98>)
 80004ec:	edc3 7a00 	vstr	s15, [r3]
	pwm[1] = TIM2->CNT - 30000;
 80004f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f6:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 80004fa:	3b30      	subs	r3, #48	; 0x30
 80004fc:	ee07 3a90 	vmov	s15, r3
 8000500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <Count2rpm+0x98>)
 8000506:	edc3 7a01 	vstr	s15, [r3, #4]
	pwm[2] = TIM3->CNT - 30000;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <Count2rpm+0x9c>)
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000512:	3b30      	subs	r3, #48	; 0x30
 8000514:	ee07 3a90 	vmov	s15, r3
 8000518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <Count2rpm+0x98>)
 800051e:	edc3 7a02 	vstr	s15, [r3, #8]
	pwm[3] = TIM4->CNT - 30000;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <Count2rpm+0xa0>)
 8000524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000526:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 800052a:	3b30      	subs	r3, #48	; 0x30
 800052c:	ee07 3a90 	vmov	s15, r3
 8000530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <Count2rpm+0x98>)
 8000536:	edc3 7a03 	vstr	s15, [r3, #12]
	TIM1->CNT = 30000;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <Count2rpm+0x94>)
 800053c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 30000;
 8000542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000546:	f247 5230 	movw	r2, #30000	; 0x7530
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 30000;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <Count2rpm+0x9c>)
 800054e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 30000;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <Count2rpm+0xa0>)
 8000556:	f247 5230 	movw	r2, #30000	; 0x7530
 800055a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40010000 	.word	0x40010000
 800056c:	20000028 	.word	0x20000028
 8000570:	40000400 	.word	0x40000400
 8000574:	40000800 	.word	0x40000800

08000578 <uart_putc>:

void uart_putc(uint8_t c) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 8000586:	f107 010c 	add.w	r1, r7, #12
 800058a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058e:	2201      	movs	r2, #1
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <uart_putc+0x28>)
 8000592:	f002 fb58 	bl	8002c46 <HAL_UART_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000248 	.word	0x20000248

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 80005aa:	4b6c      	ldr	r3, [pc, #432]	; (800075c <main+0x1b8>)
 80005ac:	4a6c      	ldr	r2, [pc, #432]	; (8000760 <main+0x1bc>)
 80005ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 ffde 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f8f6 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fb24 	bl	8000c04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 face 	bl	8000b5c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c0:	f000 fa04 	bl	80009cc <MX_TIM3_Init>
  MX_TIM1_Init();
 80005c4:	f000 f95a 	bl	800087c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c8:	f000 f9ae 	bl	8000928 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005cc:	f000 fa50 	bl	8000a70 <MX_TIM4_Init>
  MX_TIM10_Init();
 80005d0:	f000 faa0 	bl	8000b14 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80005d4:	f000 faec 	bl	8000bb0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	uint8_t buf[5];
	uint16_t tx_rpm[4] = { 500, 500, 500, 500 };
 80005d8:	4a62      	ldr	r2, [pc, #392]	; (8000764 <main+0x1c0>)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e0:	e883 0003 	stmia.w	r3, {r0, r1}
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 80005e4:	4960      	ldr	r1, [pc, #384]	; (8000768 <main+0x1c4>)
 80005e6:	4861      	ldr	r0, [pc, #388]	; (800076c <main+0x1c8>)
 80005e8:	f001 ffb5 	bl	8002556 <HAL_TIM_Encoder_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <main+0x52>
		Error_Handler();
 80005f2:	f000 fb77 	bl	8000ce4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005f6:	213c      	movs	r1, #60	; 0x3c
 80005f8:	485c      	ldr	r0, [pc, #368]	; (800076c <main+0x1c8>)
 80005fa:	f002 f83e 	bl	800267a <HAL_TIM_Encoder_Start>
	TIM1->CNT = 30000;
 80005fe:	4b5c      	ldr	r3, [pc, #368]	; (8000770 <main+0x1cc>)
 8000600:	f247 5230 	movw	r2, #30000	; 0x7530
 8000604:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 8000606:	495b      	ldr	r1, [pc, #364]	; (8000774 <main+0x1d0>)
 8000608:	485b      	ldr	r0, [pc, #364]	; (8000778 <main+0x1d4>)
 800060a:	f001 ffa4 	bl	8002556 <HAL_TIM_Encoder_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <main+0x74>
		Error_Handler();
 8000614:	f000 fb66 	bl	8000ce4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000618:	213c      	movs	r1, #60	; 0x3c
 800061a:	4857      	ldr	r0, [pc, #348]	; (8000778 <main+0x1d4>)
 800061c:	f002 f82d 	bl	800267a <HAL_TIM_Encoder_Start>
	TIM2->CNT = 30000;
 8000620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000624:	f247 5230 	movw	r2, #30000	; 0x7530
 8000628:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 800062a:	4954      	ldr	r1, [pc, #336]	; (800077c <main+0x1d8>)
 800062c:	4854      	ldr	r0, [pc, #336]	; (8000780 <main+0x1dc>)
 800062e:	f001 ff92 	bl	8002556 <HAL_TIM_Encoder_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0x98>
		Error_Handler();
 8000638:	f000 fb54 	bl	8000ce4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800063c:	213c      	movs	r1, #60	; 0x3c
 800063e:	4850      	ldr	r0, [pc, #320]	; (8000780 <main+0x1dc>)
 8000640:	f002 f81b 	bl	800267a <HAL_TIM_Encoder_Start>
	TIM3->CNT = 30000;
 8000644:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <main+0x1e0>)
 8000646:	f247 5230 	movw	r2, #30000	; 0x7530
 800064a:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_TIM_Encoder_Init(&htim4, &sConfig4) != HAL_OK) {
 800064c:	494e      	ldr	r1, [pc, #312]	; (8000788 <main+0x1e4>)
 800064e:	484f      	ldr	r0, [pc, #316]	; (800078c <main+0x1e8>)
 8000650:	f001 ff81 	bl	8002556 <HAL_TIM_Encoder_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <main+0xba>
		Error_Handler();
 800065a:	f000 fb43 	bl	8000ce4 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800065e:	213c      	movs	r1, #60	; 0x3c
 8000660:	484a      	ldr	r0, [pc, #296]	; (800078c <main+0x1e8>)
 8000662:	f002 f80a 	bl	800267a <HAL_TIM_Encoder_Start>
	TIM4->CNT = 30000;
 8000666:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <main+0x1ec>)
 8000668:	f247 5230 	movw	r2, #30000	; 0x7530
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);
 800066e:	4849      	ldr	r0, [pc, #292]	; (8000794 <main+0x1f0>)
 8000670:	f001 ff4d 	bl	800250e <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		for (int i = 0; i < 4; i++) {
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e017      	b.n	80006aa <main+0x106>
			tx_rpm[i] = (int)pwm[i] + 500;
 800067a:	4a47      	ldr	r2, [pc, #284]	; (8000798 <main+0x1f4>)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	edd3 7a00 	vldr	s15, [r3]
 8000686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800068a:	ee17 3a90 	vmov	r3, s15
 800068e:	b29b      	uxth	r3, r3
 8000690:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000694:	b29a      	uxth	r2, r3
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	f107 0118 	add.w	r1, r7, #24
 800069e:	440b      	add	r3, r1
 80006a0:	f823 2c14 	strh.w	r2, [r3, #-20]
		for (int i = 0; i < 4; i++) {
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3301      	adds	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	dde4      	ble.n	800067a <main+0xd6>
		}
		buf[0] = (tx_rpm[0] & 0xFF); //0から8?��?
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	733b      	strb	r3, [r7, #12]
		buf[1] = (((tx_rpm[0] >> 8) + (tx_rpm[1] << 2)) & 0xFF); //0から2�?��??1から6?��?
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4413      	add	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	737b      	strb	r3, [r7, #13]
		buf[2] = (((tx_rpm[1] >> 6) + (tx_rpm[2] << 4)) & 0xFF); //1から4�?��??2から4?��?
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	099b      	lsrs	r3, r3, #6
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	893b      	ldrh	r3, [r7, #8]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4413      	add	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	73bb      	strb	r3, [r7, #14]
		buf[3] = (((tx_rpm[2] >> 4) + (tx_rpm[3] << 6)) & 0xFF); //2から6�?��??3から2?��?
 80006e2:	893b      	ldrh	r3, [r7, #8]
 80006e4:	091b      	lsrs	r3, r3, #4
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	897b      	ldrh	r3, [r7, #10]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	019b      	lsls	r3, r3, #6
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	73fb      	strb	r3, [r7, #15]
		buf[4] = ((tx_rpm[3] >> 2) & 0xFF);
 80006f8:	897b      	ldrh	r3, [r7, #10]
 80006fa:	089b      	lsrs	r3, r3, #2
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	743b      	strb	r3, [r7, #16]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 0xFFFF);
 8000702:	f107 010c 	add.w	r1, r7, #12
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	2205      	movs	r2, #5
 800070c:	4823      	ldr	r0, [pc, #140]	; (800079c <main+0x1f8>)
 800070e:	f002 fa9a 	bl	8002c46 <HAL_UART_Transmit>
		xprintf("%d,%d,%d,%d\r\n",(int)pwm[0],(int)pwm[1],(int)pwm[2],(int)pwm[3]);
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <main+0x1f4>)
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <main+0x1f4>)
 800071e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000722:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <main+0x1f4>)
 8000728:	edd3 7a02 	vldr	s15, [r3, #8]
 800072c:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <main+0x1f4>)
 8000732:	edd3 7a03 	vldr	s15, [r3, #12]
 8000736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800073a:	ee17 3a90 	vmov	r3, s15
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	ee16 3a10 	vmov	r3, s12
 8000744:	ee16 2a90 	vmov	r2, s13
 8000748:	ee17 1a10 	vmov	r1, s14
 800074c:	4814      	ldr	r0, [pc, #80]	; (80007a0 <main+0x1fc>)
 800074e:	f000 fed3 	bl	80014f8 <xprintf>
		HAL_Delay(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 ff7e 	bl	8001654 <HAL_Delay>
		for (int i = 0; i < 4; i++) {
 8000758:	e78c      	b.n	8000674 <main+0xd0>
 800075a:	bf00      	nop
 800075c:	200002b0 	.word	0x200002b0
 8000760:	08000579 	.word	0x08000579
 8000764:	08003584 	.word	0x08003584
 8000768:	20000044 	.word	0x20000044
 800076c:	20000188 	.word	0x20000188
 8000770:	40010000 	.word	0x40010000
 8000774:	20000288 	.word	0x20000288
 8000778:	20000208 	.word	0x20000208
 800077c:	200000f8 	.word	0x200000f8
 8000780:	2000011c 	.word	0x2000011c
 8000784:	40000400 	.word	0x40000400
 8000788:	20000164 	.word	0x20000164
 800078c:	20000068 	.word	0x20000068
 8000790:	40000800 	.word	0x40000800
 8000794:	200000a8 	.word	0x200000a8
 8000798:	20000028 	.word	0x20000028
 800079c:	200001c8 	.word	0x200001c8
 80007a0:	08003574 	.word	0x08003574

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 feca 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemClock_Config+0xd0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <SystemClock_Config+0xd0>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemClock_Config+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b23      	ldr	r3, [pc, #140]	; (8000878 <SystemClock_Config+0xd4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <SystemClock_Config+0xd4>)
 80007f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000818:	2310      	movs	r3, #16
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800081c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000822:	2304      	movs	r3, #4
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000826:	2307      	movs	r3, #7
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	4618      	mov	r0, r3
 8000830:	f001 f9e0 	bl	8001bf4 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800083a:	f000 fa53 	bl	8000ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2102      	movs	r1, #2
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fc3a 	bl	80020d4 <HAL_RCC_ClockConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000866:	f000 fa3d 	bl	8000ce4 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3750      	adds	r7, #80	; 0x50
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_TIM1_Init+0x9c>)
 8000882:	4a26      	ldr	r2, [pc, #152]	; (800091c <MX_TIM1_Init+0xa0>)
 8000884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_TIM1_Init+0x9c>)
 8000888:	2201      	movs	r2, #1
 800088a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_TIM1_Init+0x9c>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_TIM1_Init+0x9c>)
 8000894:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000898:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_TIM1_Init+0x9c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM1_Init+0x9c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM1_Init+0x9c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  sConfig1.EncoderMode = TIM_ENCODERMODE_TI1;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
  sConfig1.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  sConfig1.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	609a      	str	r2, [r3, #8]
  sConfig1.IC1Prescaler = TIM_ICPSC_DIV1;
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  sConfig1.IC1Filter = 0;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  sConfig1.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  sConfig1.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	619a      	str	r2, [r3, #24]
  sConfig1.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  sConfig1.IC2Filter = 0;
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK)
 80008e2:	490f      	ldr	r1, [pc, #60]	; (8000920 <MX_TIM1_Init+0xa4>)
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_TIM1_Init+0x9c>)
 80008e6:	f001 fe36 	bl	8002556 <HAL_TIM_Encoder_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008f0:	f000 f9f8 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_TIM1_Init+0xa8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
  sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_TIM1_Init+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig1) != HAL_OK)
 8000900:	4908      	ldr	r1, [pc, #32]	; (8000924 <MX_TIM1_Init+0xa8>)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_TIM1_Init+0x9c>)
 8000904:	f002 f8d0 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800090e:	f000 f9e9 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000188 	.word	0x20000188
 800091c:	40010000 	.word	0x40010000
 8000920:	20000044 	.word	0x20000044
 8000924:	200000f0 	.word	0x200000f0

08000928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_TIM2_Init+0x98>)
 800092e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_TIM2_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59999;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000942:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000946:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM2_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_TIM2_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  sConfig2.EncoderMode = TIM_ENCODERMODE_TI1;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_TIM2_Init+0x9c>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
  sConfig2.IC1Polarity = TIM_ICPOLARITY_RISING;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM2_Init+0x9c>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  sConfig2.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_TIM2_Init+0x9c>)
 8000962:	2201      	movs	r2, #1
 8000964:	609a      	str	r2, [r3, #8]
  sConfig2.IC1Prescaler = TIM_ICPSC_DIV1;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_TIM2_Init+0x9c>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  sConfig2.IC1Filter = 0;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_TIM2_Init+0x9c>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  sConfig2.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_TIM2_Init+0x9c>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  sConfig2.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_TIM2_Init+0x9c>)
 800097a:	2201      	movs	r2, #1
 800097c:	619a      	str	r2, [r3, #24]
  sConfig2.IC2Prescaler = TIM_ICPSC_DIV1;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_TIM2_Init+0x9c>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  sConfig2.IC2Filter = 0;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_TIM2_Init+0x9c>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK)
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <MX_TIM2_Init+0x9c>)
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM2_Init+0x98>)
 800098e:	f001 fde2 	bl	8002556 <HAL_TIM_Encoder_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000998:	f000 f9a4 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_TIM2_Init+0xa0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
  sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_TIM2_Init+0xa0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 80009a8:	4907      	ldr	r1, [pc, #28]	; (80009c8 <MX_TIM2_Init+0xa0>)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM2_Init+0x98>)
 80009ac:	f002 f87c 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80009b6:	f000 f995 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000208 	.word	0x20000208
 80009c4:	20000288 	.word	0x20000288
 80009c8:	2000003c 	.word	0x2000003c

080009cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <MX_TIM3_Init+0x98>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009d8:	2201      	movs	r2, #1
 80009da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009e4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80009e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM3_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  sConfig3.EncoderMode = TIM_ENCODERMODE_TI1;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_TIM3_Init+0x9c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
  sConfig3.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_TIM3_Init+0x9c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  sConfig3.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	609a      	str	r2, [r3, #8]
  sConfig3.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  sConfig3.IC1Filter = 0;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  sConfig3.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  sConfig3.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	619a      	str	r2, [r3, #24]
  sConfig3.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  sConfig3.IC2Filter = 0;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK)
 8000a2c:	490e      	ldr	r1, [pc, #56]	; (8000a68 <MX_TIM3_Init+0x9c>)
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a30:	f001 fd91 	bl	8002556 <HAL_TIM_Encoder_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000a3a:	f000 f953 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_TIM3_Init+0xa0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
  sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_TIM3_Init+0xa0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <MX_TIM3_Init+0xa0>)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_TIM3_Init+0x94>)
 8000a4e:	f002 f82b 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000a58:	f000 f944 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000011c 	.word	0x2000011c
 8000a64:	40000400 	.word	0x40000400
 8000a68:	200000f8 	.word	0x200000f8
 8000a6c:	2000015c 	.word	0x2000015c

08000a70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  //TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000a76:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <MX_TIM4_Init+0x98>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000a88:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  sConfig4.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
  sConfig4.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  sConfig4.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	609a      	str	r2, [r3, #8]
  sConfig4.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  sConfig4.IC1Filter = 0;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  sConfig4.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  sConfig4.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	619a      	str	r2, [r3, #24]
  sConfig4.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  sConfig4.IC2Filter = 0;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig4) != HAL_OK)
 8000ad0:	490e      	ldr	r1, [pc, #56]	; (8000b0c <MX_TIM4_Init+0x9c>)
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000ad4:	f001 fd3f 	bl	8002556 <HAL_TIM_Encoder_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000ade:	f000 f901 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
  sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <MX_TIM4_Init+0xa0>)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_TIM4_Init+0x94>)
 8000af2:	f001 ffd9 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000afc:	f000 f8f2 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000068 	.word	0x20000068
 8000b08:	40000800 	.word	0x40000800
 8000b0c:	20000164 	.word	0x20000164
 8000b10:	200000e8 	.word	0x200000e8

08000b14 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_TIM10_Init+0x40>)
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <MX_TIM10_Init+0x44>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <MX_TIM10_Init+0x40>)
 8000b20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b24:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_TIM10_Init+0x40>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8400;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_TIM10_Init+0x40>)
 8000b2e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000b32:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_TIM10_Init+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_TIM10_Init+0x40>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_TIM10_Init+0x40>)
 8000b42:	f001 fcb9 	bl	80024b8 <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000b4c:	f000 f8ca 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	40014400 	.word	0x40014400

08000b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_USART2_UART_Init+0x50>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USART2_UART_Init+0x4c>)
 8000b94:	f002 f80a 	bl	8002bac <HAL_UART_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9e:	f000 f8a1 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000248 	.word	0x20000248
 8000bac:	40004400 	.word	0x40004400

08000bb0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_USART6_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART6_UART_Init+0x4c>)
 8000be8:	f001 ffe0 	bl	8002bac <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f000 f877 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001c8 	.word	0x200001c8
 8000c00:	40011400 	.word	0x40011400

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4812      	ldr	r0, [pc, #72]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c90:	f000 ff96 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_GPIO_Init+0xd8>)
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_GPIO_Init+0xdc>)
 8000caa:	f000 fe07 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000cc6:	f000 fdf9 	bl	80018bc <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	10210000 	.word	0x10210000
 8000ce0:	40020800 	.word	0x40020800

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f000 fd80 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	; 0x40
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a68      	ldr	r2, [pc, #416]	; (8000f04 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d135      	bne.n	8000dd2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a66      	ldr	r2, [pc, #408]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
 8000d86:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	4854      	ldr	r0, [pc, #336]	; (8000f0c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000dbc:	f000 fd7e 	bl	80018bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2019      	movs	r0, #25
 8000dc6:	f000 fd42 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f000 fd5b 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dd0:	e094      	b.n	8000efc <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dda:	d12c      	bne.n	8000e36 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
 8000de0:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a48      	ldr	r2, [pc, #288]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	623b      	str	r3, [r7, #32]
 8000df6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a41      	ldr	r2, [pc, #260]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e14:	2303      	movs	r3, #3
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e24:	2301      	movs	r3, #1
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4837      	ldr	r0, [pc, #220]	; (8000f0c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e30:	f000 fd44 	bl	80018bc <HAL_GPIO_Init>
}
 8000e34:	e062      	b.n	8000efc <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM3)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a35      	ldr	r2, [pc, #212]	; (8000f10 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d12c      	bne.n	8000e9a <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	4a2f      	ldr	r2, [pc, #188]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e78:	23c0      	movs	r3, #192	; 0xc0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	481e      	ldr	r0, [pc, #120]	; (8000f0c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8000e94:	f000 fd12 	bl	80018bc <HAL_GPIO_Init>
}
 8000e98:	e030      	b.n	8000efc <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM4)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d12b      	bne.n	8000efc <HAL_TIM_Encoder_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000edc:	23c0      	movs	r3, #192	; 0xc0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eec:	2302      	movs	r3, #2
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8000ef8:	f000 fce0 	bl	80018bc <HAL_GPIO_Init>
}
 8000efc:	bf00      	nop
 8000efe:	3740      	adds	r7, #64	; 0x40
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010000 	.word	0x40010000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40000400 	.word	0x40000400
 8000f14:	40000800 	.word	0x40000800
 8000f18:	40020400 	.word	0x40020400

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d115      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2019      	movs	r0, #25
 8000f50:	f000 fc7d 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f54:	2019      	movs	r0, #25
 8000f56:	f000 fc96 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40014400 	.word	0x40014400
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a32      	ldr	r2, [pc, #200]	; (8001054 <HAL_UART_MspInit+0xe8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12c      	bne.n	8000fe8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a30      	ldr	r2, [pc, #192]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481e      	ldr	r0, [pc, #120]	; (800105c <HAL_UART_MspInit+0xf0>)
 8000fe2:	f000 fc6b 	bl	80018bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fe6:	e031      	b.n	800104c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_UART_MspInit+0xf4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12c      	bne.n	800104c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_UART_MspInit+0xec>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_MspInit+0xec>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_UART_MspInit+0xec>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_UART_MspInit+0xec>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_UART_MspInit+0xec>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800102a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800103c:	2308      	movs	r3, #8
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_UART_MspInit+0xf0>)
 8001048:	f000 fc38 	bl	80018bc <HAL_GPIO_Init>
}
 800104c:	bf00      	nop
 800104e:	3730      	adds	r7, #48	; 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40004400 	.word	0x40004400
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000
 8001060:	40011400 	.word	0x40011400

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 faac 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80010c6:	f001 fb0f 	bl	80026e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80010cc:	f001 fb0c 	bl	80026e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
	Count2rpm();
 80010d0:	f7ff fa00 	bl	80004d4 <Count2rpm>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000188 	.word	0x20000188
 80010dc:	200000a8 	.word	0x200000a8

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <SystemInit+0x28>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <SystemInit+0x28>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SystemInit+0x28>)
 80010f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fa:	609a      	str	r2, [r3, #8]
#endif
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b0a      	cmp	r3, #10
 800111a:	d102      	bne.n	8001122 <xputc+0x16>
 800111c:	200d      	movs	r0, #13
 800111e:	f7ff fff5 	bl	800110c <xputc>

	if (outptr) {		/* Destination is memory */
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <xputc+0x48>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <xputc+0x48>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	4908      	ldr	r1, [pc, #32]	; (8001154 <xputc+0x48>)
 8001132:	600a      	str	r2, [r1, #0]
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	701a      	strb	r2, [r3, #0]
		return;
 8001138:	e008      	b.n	800114c <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <xputc+0x4c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d004      	beq.n	800114c <xputc+0x40>
		xfunc_out((unsigned char)c);
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <xputc+0x4c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	4610      	mov	r0, r2
 800114a:	4798      	blx	r3
	}
}
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000038 	.word	0x20000038
 8001158:	200002b0 	.word	0x200002b0

0800115c <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	while (*str) {
 8001164:	e006      	b.n	8001174 <xputs+0x18>
		xputc(*str++);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffcc 	bl	800110c <xputc>
	while (*str) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f4      	bne.n	8001166 <xputs+0xa>
	}
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	; 0x50
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 800119a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 81a3 	beq.w	80014ea <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 80011a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011a8:	2b25      	cmp	r3, #37	; 0x25
 80011aa:	d005      	beq.n	80011b8 <xvprintf+0x34>
			xputc(c); continue;
 80011ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ffab 	bl	800110c <xputc>
 80011b6:	e197      	b.n	80014e8 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 80011b8:	2300      	movs	r3, #0
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
 80011bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 80011cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011d0:	2b30      	cmp	r3, #48	; 0x30
 80011d2:	d108      	bne.n	80011e6 <xvprintf+0x62>
			f = 1; c = *fmt++;
 80011d4:	2301      	movs	r3, #1
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011e4:	e00b      	b.n	80011fe <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80011e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011ea:	2b2d      	cmp	r3, #45	; 0x2d
 80011ec:	d107      	bne.n	80011fe <xvprintf+0x7a>
				f = 2; c = *fmt++;
 80011ee:	2302      	movs	r3, #2
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 80011fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001202:	2b2a      	cmp	r3, #42	; 0x2a
 8001204:	d126      	bne.n	8001254 <xvprintf+0xd0>
			n = va_arg(arp, int);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	1d1a      	adds	r2, r3, #4
 800120a:	603a      	str	r2, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8001210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001212:	2b00      	cmp	r3, #0
 8001214:	da04      	bge.n	8001220 <xvprintf+0x9c>
				n = 0 - n;
 8001216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001218:	425b      	negs	r3, r3
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8001220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001230:	e018      	b.n	8001264 <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8001232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	461a      	mov	r2, r3
 800123e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001242:	4413      	add	r3, r2
 8001244:	3b30      	subs	r3, #48	; 0x30
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8001254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001258:	2b2f      	cmp	r3, #47	; 0x2f
 800125a:	d903      	bls.n	8001264 <xvprintf+0xe0>
 800125c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001260:	2b39      	cmp	r3, #57	; 0x39
 8001262:	d9e6      	bls.n	8001232 <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 8001264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001268:	2b6c      	cmp	r3, #108	; 0x6c
 800126a:	d003      	beq.n	8001274 <xvprintf+0xf0>
 800126c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001270:	2b4c      	cmp	r3, #76	; 0x4c
 8001272:	d109      	bne.n	8001288 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 8001274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8001288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 812e 	beq.w	80014ee <xvprintf+0x36a>
		d = c;
 8001292:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001296:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 800129a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800129e:	2b60      	cmp	r3, #96	; 0x60
 80012a0:	d904      	bls.n	80012ac <xvprintf+0x128>
 80012a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012a6:	3b20      	subs	r3, #32
 80012a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 80012ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80012b0:	3b42      	subs	r3, #66	; 0x42
 80012b2:	2b16      	cmp	r3, #22
 80012b4:	d873      	bhi.n	800139e <xvprintf+0x21a>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <xvprintf+0x138>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	08001387 	.word	0x08001387
 80012c0:	08001375 	.word	0x08001375
 80012c4:	08001393 	.word	0x08001393
 80012c8:	0800139f 	.word	0x0800139f
 80012cc:	0800139f 	.word	0x0800139f
 80012d0:	0800139f 	.word	0x0800139f
 80012d4:	0800139f 	.word	0x0800139f
 80012d8:	0800139f 	.word	0x0800139f
 80012dc:	0800139f 	.word	0x0800139f
 80012e0:	0800139f 	.word	0x0800139f
 80012e4:	0800139f 	.word	0x0800139f
 80012e8:	0800139f 	.word	0x0800139f
 80012ec:	0800139f 	.word	0x0800139f
 80012f0:	0800138d 	.word	0x0800138d
 80012f4:	0800139f 	.word	0x0800139f
 80012f8:	0800139f 	.word	0x0800139f
 80012fc:	0800139f 	.word	0x0800139f
 8001300:	08001319 	.word	0x08001319
 8001304:	0800139f 	.word	0x0800139f
 8001308:	08001393 	.word	0x08001393
 800130c:	0800139f 	.word	0x0800139f
 8001310:	0800139f 	.word	0x0800139f
 8001314:	08001399 	.word	0x08001399
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	1d1a      	adds	r2, r3, #4
 800131c:	603a      	str	r2, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8001322:	2300      	movs	r3, #0
 8001324:	647b      	str	r3, [r7, #68]	; 0x44
 8001326:	e002      	b.n	800132e <xvprintf+0x1aa>
 8001328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800132a:	3301      	adds	r3, #1
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
 800132e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f6      	bne.n	8001328 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 800133a:	e002      	b.n	8001342 <xvprintf+0x1be>
 800133c:	2020      	movs	r0, #32
 800133e:	f7ff fee5 	bl	800110c <xputc>
 8001342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d105      	bne.n	8001358 <xvprintf+0x1d4>
 800134c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	647a      	str	r2, [r7, #68]	; 0x44
 8001352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f1      	bhi.n	800133c <xvprintf+0x1b8>
			xputs(p);
 8001358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800135a:	f7ff feff 	bl	800115c <xputs>
			while (j++ < w) xputc(' ');
 800135e:	e002      	b.n	8001366 <xvprintf+0x1e2>
 8001360:	2020      	movs	r0, #32
 8001362:	f7ff fed3 	bl	800110c <xputc>
 8001366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	647a      	str	r2, [r7, #68]	; 0x44
 800136c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800136e:	429a      	cmp	r2, r3
 8001370:	d8f6      	bhi.n	8001360 <xvprintf+0x1dc>
			continue;
 8001372:	e0b9      	b.n	80014e8 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	1d1a      	adds	r2, r3, #4
 8001378:	603a      	str	r2, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fec4 	bl	800110c <xputc>
 8001384:	e0b0      	b.n	80014e8 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 8001386:	2302      	movs	r3, #2
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800138a:	e00e      	b.n	80013aa <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 800138c:	2308      	movs	r3, #8
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001390:	e00b      	b.n	80013aa <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8001392:	230a      	movs	r3, #10
 8001394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001396:	e008      	b.n	80013aa <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8001398:	2310      	movs	r3, #16
 800139a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800139c:	e005      	b.n	80013aa <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 800139e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff feb2 	bl	800110c <xputc>
 80013a8:	e09e      	b.n	80014e8 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 80013aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <xvprintf+0x23c>
			v = va_arg(arp, long);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	1d1a      	adds	r2, r3, #4
 80013b8:	603a      	str	r2, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
 80013be:	e00d      	b.n	80013dc <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 80013c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013c4:	2b44      	cmp	r3, #68	; 0x44
 80013c6:	d104      	bne.n	80013d2 <xvprintf+0x24e>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	1d1a      	adds	r2, r3, #4
 80013cc:	603a      	str	r2, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	e003      	b.n	80013da <xvprintf+0x256>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	1d1a      	adds	r2, r3, #4
 80013d6:	603a      	str	r2, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 80013dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80013e0:	2b44      	cmp	r3, #68	; 0x44
 80013e2:	d109      	bne.n	80013f8 <xvprintf+0x274>
 80013e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da06      	bge.n	80013f8 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 80013ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ec:	425b      	negs	r3, r3
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
 80013f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 80013f8:	2300      	movs	r3, #0
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80013fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001404:	fbb3 f2f2 	udiv	r2, r3, r2
 8001408:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800140a:	fb01 f202 	mul.w	r2, r1, r2
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800141e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001422:	2b09      	cmp	r3, #9
 8001424:	d90b      	bls.n	800143e <xvprintf+0x2ba>
 8001426:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800142a:	2b78      	cmp	r3, #120	; 0x78
 800142c:	d101      	bne.n	8001432 <xvprintf+0x2ae>
 800142e:	2227      	movs	r2, #39	; 0x27
 8001430:	e000      	b.n	8001434 <xvprintf+0x2b0>
 8001432:	2207      	movs	r2, #7
 8001434:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001438:	4413      	add	r3, r2
 800143a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 800143e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	64ba      	str	r2, [r7, #72]	; 0x48
 8001444:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001448:	3230      	adds	r2, #48	; 0x30
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001450:	440b      	add	r3, r1
 8001452:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <xvprintf+0x2de>
 800145c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800145e:	2b1f      	cmp	r3, #31
 8001460:	d9ce      	bls.n	8001400 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 8001462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <xvprintf+0x2fa>
 800146c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	64ba      	str	r2, [r7, #72]	; 0x48
 8001472:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001476:	4413      	add	r3, r2
 8001478:	222d      	movs	r2, #45	; 0x2d
 800147a:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 800147e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001480:	647b      	str	r3, [r7, #68]	; 0x44
 8001482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <xvprintf+0x30c>
 800148c:	2330      	movs	r3, #48	; 0x30
 800148e:	e000      	b.n	8001492 <xvprintf+0x30e>
 8001490:	2320      	movs	r3, #32
 8001492:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 8001496:	e004      	b.n	80014a2 <xvprintf+0x31e>
 8001498:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe35 	bl	800110c <xputc>
 80014a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d105      	bne.n	80014b8 <xvprintf+0x334>
 80014ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	647a      	str	r2, [r7, #68]	; 0x44
 80014b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8ef      	bhi.n	8001498 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 80014b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ba:	3b01      	subs	r3, #1
 80014bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80014be:	f107 0208 	add.w	r2, r7, #8
 80014c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe1f 	bl	800110c <xputc>
 80014ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f1      	bne.n	80014b8 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 80014d4:	e002      	b.n	80014dc <xvprintf+0x358>
 80014d6:	2020      	movs	r0, #32
 80014d8:	f7ff fe18 	bl	800110c <xputc>
 80014dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	647a      	str	r2, [r7, #68]	; 0x44
 80014e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f6      	bhi.n	80014d6 <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 80014e8:	e651      	b.n	800118e <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 80014ee:	bf00      	nop
	}
}
 80014f0:	bf00      	nop
 80014f2:	3750      	adds	r7, #80	; 0x50
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80014f8:	b40f      	push	{r0, r1, r2, r3}
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	6938      	ldr	r0, [r7, #16]
 800150a:	f7ff fe3b 	bl	8001184 <xvprintf>
	va_end(arp);
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001518:	b004      	add	sp, #16
 800151a:	4770      	bx	lr

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001522:	e003      	b.n	800152c <LoopCopyDataInit>

08001524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800152a:	3104      	adds	r1, #4

0800152c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001534:	d3f6      	bcc.n	8001524 <CopyDataInit>
  ldr  r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001538:	e002      	b.n	8001540 <LoopFillZerobss>

0800153a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800153a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800153c:	f842 3b04 	str.w	r3, [r2], #4

08001540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001544:	d3f9      	bcc.n	800153a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001546:	f7ff fdcb 	bl	80010e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 ffdb 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff f829 	bl	80005a4 <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001554:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001558:	080035b4 	.word	0x080035b4
  ldr  r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001560:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001564:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001568:	200002b8 	.word	0x200002b8

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f94d 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fba6 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f965 	bl	80018a2 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f92d 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000000 	.word	0x20000000
 800160c:	20000008 	.word	0x20000008
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	200002b4 	.word	0x200002b4

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200002b4 	.word	0x200002b4

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_Delay+0x40>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000008 	.word	0x20000008

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e159      	b.n	8001b8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	f040 8148 	bne.w	8001b86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d00b      	beq.n	8001916 <HAL_GPIO_Init+0x5a>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190a:	2b11      	cmp	r3, #17
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b12      	cmp	r3, #18
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0xfc>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b12      	cmp	r3, #18
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a2 	beq.w	8001b86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b56      	ldr	r3, [pc, #344]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a55      	ldr	r2, [pc, #340]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_GPIO_Init+0x2e4>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a5e:	4a51      	ldr	r2, [pc, #324]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a48      	ldr	r2, [pc, #288]	; (8001ba8 <HAL_GPIO_Init+0x2ec>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x202>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_GPIO_Init+0x2f0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x1fe>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <HAL_GPIO_Init+0x2f4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x1fa>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a45      	ldr	r2, [pc, #276]	; (8001bb4 <HAL_GPIO_Init+0x2f8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x1f6>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a44      	ldr	r2, [pc, #272]	; (8001bb8 <HAL_GPIO_Init+0x2fc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x1f2>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x204>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad0:	4934      	ldr	r1, [pc, #208]	; (8001ba4 <HAL_GPIO_Init+0x2e8>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b02:	4a2e      	ldr	r2, [pc, #184]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b56:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_GPIO_Init+0x300>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f aea2 	bls.w	80018d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	3724      	adds	r7, #36	; 0x24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40013c00 	.word	0x40013c00

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e25b      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d075      	beq.n	8001cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c12:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d00c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4ba0      	ldr	r3, [pc, #640]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d112      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4b9d      	ldr	r3, [pc, #628]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b99      	ldr	r3, [pc, #612]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d05b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x108>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d157      	bne.n	8001cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e236      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x74>
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a90      	ldr	r2, [pc, #576]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x98>
 8001c72:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a8a      	ldr	r2, [pc, #552]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a87      	ldr	r2, [pc, #540]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a83      	ldr	r2, [pc, #524]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fcc6 	bl	800163c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fcc2 	bl	800163c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1fb      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xc0>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fcb2 	bl	800163c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fcae 	bl	800163c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1e7      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0xe8>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b62      	ldr	r3, [pc, #392]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1bb      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4952      	ldr	r1, [pc, #328]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_RCC_OscConfig+0x2b0>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fc67 	bl	800163c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fc63 	bl	800163c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e19c      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4940      	ldr	r1, [pc, #256]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_OscConfig+0x2b0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc46 	bl	800163c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fc42 	bl	800163c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e17b      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d030      	beq.n	8001e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_RCC_OscConfig+0x2b4>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fc26 	bl	800163c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc22 	bl	800163c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e15b      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x200>
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_OscConfig+0x2b4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fc0f 	bl	800163c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff fc0b 	bl	800163c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e144      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a0 	beq.w	8001f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10f      	bne.n	8001e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fbd1 	bl	800163c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	e011      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2ce>
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
 8001eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7ff fbc4 	bl	800163c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0fd      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <HAL_RCC_OscConfig+0x4d4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
 8001ed6:	4b7d      	ldr	r3, [pc, #500]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a7c      	ldr	r2, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee2:	e01c      	b.n	8001f1e <HAL_RCC_OscConfig+0x32a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x312>
 8001eec:	4b77      	ldr	r3, [pc, #476]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a76      	ldr	r2, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	4b74      	ldr	r3, [pc, #464]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a73      	ldr	r2, [pc, #460]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x32a>
 8001f06:	4b71      	ldr	r3, [pc, #452]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a70      	ldr	r2, [pc, #448]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	4b6e      	ldr	r3, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a6d      	ldr	r2, [pc, #436]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb89 	bl	800163c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fb85 	bl	800163c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0bc      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ee      	beq.n	8001f2e <HAL_RCC_OscConfig+0x33a>
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb73 	bl	800163c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb6f 	bl	800163c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0a6      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ee      	bne.n	8001f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b52      	ldr	r3, [pc, #328]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a51      	ldr	r2, [pc, #324]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8092 	beq.w	80020bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f98:	4b4c      	ldr	r3, [pc, #304]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d05c      	beq.n	800205e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d141      	bne.n	8002030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <HAL_RCC_OscConfig+0x4dc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fb43 	bl	800163c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff fb3f 	bl	800163c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e078      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fcc:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
 8001ffc:	4933      	ldr	r1, [pc, #204]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_RCC_OscConfig+0x4dc>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fb18 	bl	800163c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff fb14 	bl	800163c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e04d      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b2a      	ldr	r3, [pc, #168]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x41c>
 800202e:	e045      	b.n	80020bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x4dc>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fb01 	bl	800163c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff fafd 	bl	800163c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e036      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x44a>
 800205c:	e02e      	b.n	80020bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e029      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_RCC_OscConfig+0x4d8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d11c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d115      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002092:	4013      	ands	r3, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002098:	4293      	cmp	r3, r2
 800209a:	d10d      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40007000 	.word	0x40007000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	42470060 	.word	0x42470060

080020d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cc      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d90c      	bls.n	8002110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b8      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002128:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800214a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	494d      	ldr	r1, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d044      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d119      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d003      	beq.n	8002192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	2b03      	cmp	r3, #3
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e067      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4934      	ldr	r1, [pc, #208]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7ff fa3a 	bl	800163c <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7ff fa36 	bl	800163c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e04f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d20c      	bcs.n	800221c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e032      	b.n	8002282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4916      	ldr	r1, [pc, #88]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800225a:	f000 f821 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800225e:	4601      	mov	r1, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	fa21 f303 	lsr.w	r3, r1, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f99a 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023c00 	.word	0x40023c00
 8002290:	40023800 	.word	0x40023800
 8002294:	0800358c 	.word	0x0800358c
 8002298:	20000000 	.word	0x20000000
 800229c:	20000004 	.word	0x20000004

080022a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2300      	movs	r3, #0
 80022b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d007      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x32>
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d008      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x38>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 80b4 	bne.w	8002434 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022cc:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022ce:	60bb      	str	r3, [r7, #8]
       break;
 80022d0:	e0b3      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022d2:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022d4:	60bb      	str	r3, [r7, #8]
      break;
 80022d6:	e0b0      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d8:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022e2:	4b58      	ldr	r3, [pc, #352]	; (8002444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d04a      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ee:	4b55      	ldr	r3, [pc, #340]	; (8002444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	099b      	lsrs	r3, r3, #6
 80022f4:	f04f 0400 	mov.w	r4, #0
 80022f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	ea03 0501 	and.w	r5, r3, r1
 8002304:	ea04 0602 	and.w	r6, r4, r2
 8002308:	4629      	mov	r1, r5
 800230a:	4632      	mov	r2, r6
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	f04f 0400 	mov.w	r4, #0
 8002314:	0154      	lsls	r4, r2, #5
 8002316:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800231a:	014b      	lsls	r3, r1, #5
 800231c:	4619      	mov	r1, r3
 800231e:	4622      	mov	r2, r4
 8002320:	1b49      	subs	r1, r1, r5
 8002322:	eb62 0206 	sbc.w	r2, r2, r6
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	0194      	lsls	r4, r2, #6
 8002330:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002334:	018b      	lsls	r3, r1, #6
 8002336:	1a5b      	subs	r3, r3, r1
 8002338:	eb64 0402 	sbc.w	r4, r4, r2
 800233c:	f04f 0100 	mov.w	r1, #0
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	00e2      	lsls	r2, r4, #3
 8002346:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800234a:	00d9      	lsls	r1, r3, #3
 800234c:	460b      	mov	r3, r1
 800234e:	4614      	mov	r4, r2
 8002350:	195b      	adds	r3, r3, r5
 8002352:	eb44 0406 	adc.w	r4, r4, r6
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	0262      	lsls	r2, r4, #9
 8002360:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002364:	0259      	lsls	r1, r3, #9
 8002366:	460b      	mov	r3, r1
 8002368:	4614      	mov	r4, r2
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f04f 0400 	mov.w	r4, #0
 8002374:	461a      	mov	r2, r3
 8002376:	4623      	mov	r3, r4
 8002378:	f7fd ff2c 	bl	80001d4 <__aeabi_uldivmod>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e049      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002384:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	f04f 0400 	mov.w	r4, #0
 800238e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	ea03 0501 	and.w	r5, r3, r1
 800239a:	ea04 0602 	and.w	r6, r4, r2
 800239e:	4629      	mov	r1, r5
 80023a0:	4632      	mov	r2, r6
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	f04f 0400 	mov.w	r4, #0
 80023aa:	0154      	lsls	r4, r2, #5
 80023ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023b0:	014b      	lsls	r3, r1, #5
 80023b2:	4619      	mov	r1, r3
 80023b4:	4622      	mov	r2, r4
 80023b6:	1b49      	subs	r1, r1, r5
 80023b8:	eb62 0206 	sbc.w	r2, r2, r6
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	f04f 0400 	mov.w	r4, #0
 80023c4:	0194      	lsls	r4, r2, #6
 80023c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	1a5b      	subs	r3, r3, r1
 80023ce:	eb64 0402 	sbc.w	r4, r4, r2
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	00e2      	lsls	r2, r4, #3
 80023dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023e0:	00d9      	lsls	r1, r3, #3
 80023e2:	460b      	mov	r3, r1
 80023e4:	4614      	mov	r4, r2
 80023e6:	195b      	adds	r3, r3, r5
 80023e8:	eb44 0406 	adc.w	r4, r4, r6
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	02a2      	lsls	r2, r4, #10
 80023f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023fa:	0299      	lsls	r1, r3, #10
 80023fc:	460b      	mov	r3, r1
 80023fe:	4614      	mov	r4, r2
 8002400:	4618      	mov	r0, r3
 8002402:	4621      	mov	r1, r4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f04f 0400 	mov.w	r4, #0
 800240a:	461a      	mov	r2, r3
 800240c:	4623      	mov	r3, r4
 800240e:	f7fd fee1 	bl	80001d4 <__aeabi_uldivmod>
 8002412:	4603      	mov	r3, r0
 8002414:	460c      	mov	r4, r1
 8002416:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	60bb      	str	r3, [r7, #8]
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002436:	60bb      	str	r3, [r7, #8]
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	68bb      	ldr	r3, [r7, #8]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4601      	mov	r1, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a9b      	lsrs	r3, r3, #10
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	0800359c 	.word	0x0800359c

08002490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002494:	f7ff ffdc 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002498:	4601      	mov	r1, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0b5b      	lsrs	r3, r3, #13
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	0800359c 	.word	0x0800359c

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e01d      	b.n	8002506 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fd1c 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fa30 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d007      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e083      	b.n	8002672 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe fbe0 	bl	8000d44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800259a:	f023 0307 	bic.w	r3, r3, #7
 800259e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 f9d6 	bl	800295c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	f023 0303 	bic.w	r3, r3, #3
 80025dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	4313      	orrs	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025f6:	f023 030c 	bic.w	r3, r3, #12
 80025fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	4313      	orrs	r3, r2
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	011a      	lsls	r2, r3, #4
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	031b      	lsls	r3, r3, #12
 8002626:	4313      	orrs	r3, r2
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002634:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800263c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4313      	orrs	r3, r2
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_TIM_Encoder_Start+0x16>
 800268a:	2b04      	cmp	r3, #4
 800268c:	d008      	beq.n	80026a0 <HAL_TIM_Encoder_Start+0x26>
 800268e:	e00f      	b.n	80026b0 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f000 f9df 	bl	8002a5c <TIM_CCxChannelCmd>
      break;
 800269e:	e016      	b.n	80026ce <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	2104      	movs	r1, #4
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f9d7 	bl	8002a5c <TIM_CCxChannelCmd>
      break;
 80026ae:	e00e      	b.n	80026ce <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f9cf 	bl	8002a5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	2104      	movs	r1, #4
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f9c8 	bl	8002a5c <TIM_CCxChannelCmd>
      break;
 80026cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d122      	bne.n	8002744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d11b      	bne.n	8002744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0202 	mvn.w	r2, #2
 8002714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8f8 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 8002730:	e005      	b.n	800273e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f8ea 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8fb 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b04      	cmp	r3, #4
 8002750:	d122      	bne.n	8002798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d11b      	bne.n	8002798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0204 	mvn.w	r2, #4
 8002768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8ce 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8c0 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8d1 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d122      	bne.n	80027ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d11b      	bne.n	80027ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0208 	mvn.w	r2, #8
 80027bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2204      	movs	r2, #4
 80027c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8a4 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f896 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f8a7 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d122      	bne.n	8002840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b10      	cmp	r3, #16
 8002806:	d11b      	bne.n	8002840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0210 	mvn.w	r2, #16
 8002810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2208      	movs	r2, #8
 8002816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f87a 	bl	8002920 <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f86c 	bl	800290c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f87d 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10e      	bne.n	800286c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0201 	mvn.w	r2, #1
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f846 	bl	80028f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	2b80      	cmp	r3, #128	; 0x80
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f980 	bl	8002b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d107      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f842 	bl	8002948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d107      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0220 	mvn.w	r2, #32
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f94a 	bl	8002b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <TIM_Base_SetConfig+0xe4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00f      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d00b      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <TIM_Base_SetConfig+0xe8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a30      	ldr	r2, [pc, #192]	; (8002a48 <TIM_Base_SetConfig+0xec>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x38>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <TIM_Base_SetConfig+0xf0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <TIM_Base_SetConfig+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01b      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d017      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <TIM_Base_SetConfig+0xe8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <TIM_Base_SetConfig+0xec>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <TIM_Base_SetConfig+0xf0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <TIM_Base_SetConfig+0xf4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <TIM_Base_SetConfig+0xf8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <TIM_Base_SetConfig+0xfc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <TIM_Base_SetConfig+0xe4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d103      	bne.n	8002a2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	615a      	str	r2, [r3, #20]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010000 	.word	0x40010000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40014000 	.word	0x40014000
 8002a54:	40014400 	.word	0x40014400
 8002a58:	40014800 	.word	0x40014800

08002a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2201      	movs	r2, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1a      	ldr	r2, [r3, #32]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	401a      	ands	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e050      	b.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d018      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d013      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10c      	bne.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40014000 	.word	0x40014000

08002b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e03f      	b.n	8002c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe f9ca 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f90b 	bl	8002e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b20      	cmp	r3, #32
 8002c64:	f040 8083 	bne.w	8002d6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_Transmit+0x2e>
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e07b      	b.n	8002d70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Transmit+0x40>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e074      	b.n	8002d70 <HAL_UART_Transmit+0x12a>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2221      	movs	r2, #33	; 0x21
 8002c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fcce 	bl	800163c <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002cb6:	e042      	b.n	8002d3e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d122      	bne.n	8002d16 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f84c 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e042      	b.n	8002d70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	e017      	b.n	8002d3e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3301      	adds	r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	e013      	b.n	8002d3e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f829 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e01f      	b.n	8002d70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	60ba      	str	r2, [r7, #8]
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1b7      	bne.n	8002cb8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2140      	movs	r1, #64	; 0x40
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f810 	bl	8002d78 <UART_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e006      	b.n	8002d70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d88:	e02c      	b.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d028      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d98:	f7fe fc50 	bl	800163c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d21d      	bcs.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002db6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e00f      	b.n	8002e04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d0c3      	beq.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e4e:	f023 030c 	bic.w	r3, r3, #12
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	68f9      	ldr	r1, [r7, #12]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7a:	f040 818b 	bne.w	8003194 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4ac1      	ldr	r2, [pc, #772]	; (8003188 <UART_SetConfig+0x37c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d005      	beq.n	8002e94 <UART_SetConfig+0x88>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4abf      	ldr	r2, [pc, #764]	; (800318c <UART_SetConfig+0x380>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f040 80bd 	bne.w	800300e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e94:	f7ff fafc 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 8002e98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	f04f 0600 	mov.w	r6, #0
 8002ea2:	46a8      	mov	r8, r5
 8002ea4:	46b1      	mov	r9, r6
 8002ea6:	eb18 0308 	adds.w	r3, r8, r8
 8002eaa:	eb49 0409 	adc.w	r4, r9, r9
 8002eae:	4698      	mov	r8, r3
 8002eb0:	46a1      	mov	r9, r4
 8002eb2:	eb18 0805 	adds.w	r8, r8, r5
 8002eb6:	eb49 0906 	adc.w	r9, r9, r6
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ec6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002eca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ece:	4688      	mov	r8, r1
 8002ed0:	4691      	mov	r9, r2
 8002ed2:	eb18 0005 	adds.w	r0, r8, r5
 8002ed6:	eb49 0106 	adc.w	r1, r9, r6
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f04f 0600 	mov.w	r6, #0
 8002ee4:	196b      	adds	r3, r5, r5
 8002ee6:	eb46 0406 	adc.w	r4, r6, r6
 8002eea:	461a      	mov	r2, r3
 8002eec:	4623      	mov	r3, r4
 8002eee:	f7fd f971 	bl	80001d4 <__aeabi_uldivmod>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4ba5      	ldr	r3, [pc, #660]	; (8003190 <UART_SetConfig+0x384>)
 8002efa:	fba3 2302 	umull	r2, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	461d      	mov	r5, r3
 8002f08:	f04f 0600 	mov.w	r6, #0
 8002f0c:	46a9      	mov	r9, r5
 8002f0e:	46b2      	mov	sl, r6
 8002f10:	eb19 0309 	adds.w	r3, r9, r9
 8002f14:	eb4a 040a 	adc.w	r4, sl, sl
 8002f18:	4699      	mov	r9, r3
 8002f1a:	46a2      	mov	sl, r4
 8002f1c:	eb19 0905 	adds.w	r9, r9, r5
 8002f20:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f38:	4689      	mov	r9, r1
 8002f3a:	4692      	mov	sl, r2
 8002f3c:	eb19 0005 	adds.w	r0, r9, r5
 8002f40:	eb4a 0106 	adc.w	r1, sl, r6
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	461d      	mov	r5, r3
 8002f4a:	f04f 0600 	mov.w	r6, #0
 8002f4e:	196b      	adds	r3, r5, r5
 8002f50:	eb46 0406 	adc.w	r4, r6, r6
 8002f54:	461a      	mov	r2, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	f7fd f93c 	bl	80001d4 <__aeabi_uldivmod>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	461a      	mov	r2, r3
 8002f62:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <UART_SetConfig+0x384>)
 8002f64:	fba3 1302 	umull	r1, r3, r3, r2
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	2164      	movs	r1, #100	; 0x64
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	3332      	adds	r3, #50	; 0x32
 8002f76:	4a86      	ldr	r2, [pc, #536]	; (8003190 <UART_SetConfig+0x384>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f84:	4498      	add	r8, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	461d      	mov	r5, r3
 8002f8a:	f04f 0600 	mov.w	r6, #0
 8002f8e:	46a9      	mov	r9, r5
 8002f90:	46b2      	mov	sl, r6
 8002f92:	eb19 0309 	adds.w	r3, r9, r9
 8002f96:	eb4a 040a 	adc.w	r4, sl, sl
 8002f9a:	4699      	mov	r9, r3
 8002f9c:	46a2      	mov	sl, r4
 8002f9e:	eb19 0905 	adds.w	r9, r9, r5
 8002fa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fba:	4689      	mov	r9, r1
 8002fbc:	4692      	mov	sl, r2
 8002fbe:	eb19 0005 	adds.w	r0, r9, r5
 8002fc2:	eb4a 0106 	adc.w	r1, sl, r6
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	461d      	mov	r5, r3
 8002fcc:	f04f 0600 	mov.w	r6, #0
 8002fd0:	196b      	adds	r3, r5, r5
 8002fd2:	eb46 0406 	adc.w	r4, r6, r6
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4623      	mov	r3, r4
 8002fda:	f7fd f8fb 	bl	80001d4 <__aeabi_uldivmod>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <UART_SetConfig+0x384>)
 8002fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2164      	movs	r1, #100	; 0x64
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	3332      	adds	r3, #50	; 0x32
 8002ff8:	4a65      	ldr	r2, [pc, #404]	; (8003190 <UART_SetConfig+0x384>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	f003 0207 	and.w	r2, r3, #7
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4442      	add	r2, r8
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	e26f      	b.n	80034ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800300e:	f7ff fa2b 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003012:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	461d      	mov	r5, r3
 8003018:	f04f 0600 	mov.w	r6, #0
 800301c:	46a8      	mov	r8, r5
 800301e:	46b1      	mov	r9, r6
 8003020:	eb18 0308 	adds.w	r3, r8, r8
 8003024:	eb49 0409 	adc.w	r4, r9, r9
 8003028:	4698      	mov	r8, r3
 800302a:	46a1      	mov	r9, r4
 800302c:	eb18 0805 	adds.w	r8, r8, r5
 8003030:	eb49 0906 	adc.w	r9, r9, r6
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003040:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003044:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003048:	4688      	mov	r8, r1
 800304a:	4691      	mov	r9, r2
 800304c:	eb18 0005 	adds.w	r0, r8, r5
 8003050:	eb49 0106 	adc.w	r1, r9, r6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	461d      	mov	r5, r3
 800305a:	f04f 0600 	mov.w	r6, #0
 800305e:	196b      	adds	r3, r5, r5
 8003060:	eb46 0406 	adc.w	r4, r6, r6
 8003064:	461a      	mov	r2, r3
 8003066:	4623      	mov	r3, r4
 8003068:	f7fd f8b4 	bl	80001d4 <__aeabi_uldivmod>
 800306c:	4603      	mov	r3, r0
 800306e:	460c      	mov	r4, r1
 8003070:	461a      	mov	r2, r3
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <UART_SetConfig+0x384>)
 8003074:	fba3 2302 	umull	r2, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	461d      	mov	r5, r3
 8003082:	f04f 0600 	mov.w	r6, #0
 8003086:	46a9      	mov	r9, r5
 8003088:	46b2      	mov	sl, r6
 800308a:	eb19 0309 	adds.w	r3, r9, r9
 800308e:	eb4a 040a 	adc.w	r4, sl, sl
 8003092:	4699      	mov	r9, r3
 8003094:	46a2      	mov	sl, r4
 8003096:	eb19 0905 	adds.w	r9, r9, r5
 800309a:	eb4a 0a06 	adc.w	sl, sl, r6
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030b2:	4689      	mov	r9, r1
 80030b4:	4692      	mov	sl, r2
 80030b6:	eb19 0005 	adds.w	r0, r9, r5
 80030ba:	eb4a 0106 	adc.w	r1, sl, r6
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	461d      	mov	r5, r3
 80030c4:	f04f 0600 	mov.w	r6, #0
 80030c8:	196b      	adds	r3, r5, r5
 80030ca:	eb46 0406 	adc.w	r4, r6, r6
 80030ce:	461a      	mov	r2, r3
 80030d0:	4623      	mov	r3, r4
 80030d2:	f7fd f87f 	bl	80001d4 <__aeabi_uldivmod>
 80030d6:	4603      	mov	r3, r0
 80030d8:	460c      	mov	r4, r1
 80030da:	461a      	mov	r2, r3
 80030dc:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <UART_SetConfig+0x384>)
 80030de:	fba3 1302 	umull	r1, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2164      	movs	r1, #100	; 0x64
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	3332      	adds	r3, #50	; 0x32
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <UART_SetConfig+0x384>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030fe:	4498      	add	r8, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	461d      	mov	r5, r3
 8003104:	f04f 0600 	mov.w	r6, #0
 8003108:	46a9      	mov	r9, r5
 800310a:	46b2      	mov	sl, r6
 800310c:	eb19 0309 	adds.w	r3, r9, r9
 8003110:	eb4a 040a 	adc.w	r4, sl, sl
 8003114:	4699      	mov	r9, r3
 8003116:	46a2      	mov	sl, r4
 8003118:	eb19 0905 	adds.w	r9, r9, r5
 800311c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003134:	4689      	mov	r9, r1
 8003136:	4692      	mov	sl, r2
 8003138:	eb19 0005 	adds.w	r0, r9, r5
 800313c:	eb4a 0106 	adc.w	r1, sl, r6
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	461d      	mov	r5, r3
 8003146:	f04f 0600 	mov.w	r6, #0
 800314a:	196b      	adds	r3, r5, r5
 800314c:	eb46 0406 	adc.w	r4, r6, r6
 8003150:	461a      	mov	r2, r3
 8003152:	4623      	mov	r3, r4
 8003154:	f7fd f83e 	bl	80001d4 <__aeabi_uldivmod>
 8003158:	4603      	mov	r3, r0
 800315a:	460c      	mov	r4, r1
 800315c:	461a      	mov	r2, r3
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <UART_SetConfig+0x384>)
 8003160:	fba3 1302 	umull	r1, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2164      	movs	r1, #100	; 0x64
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a07      	ldr	r2, [pc, #28]	; (8003190 <UART_SetConfig+0x384>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	f003 0207 	and.w	r2, r3, #7
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4442      	add	r2, r8
 8003184:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003186:	e1b2      	b.n	80034ee <UART_SetConfig+0x6e2>
 8003188:	40011000 	.word	0x40011000
 800318c:	40011400 	.word	0x40011400
 8003190:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4ad7      	ldr	r2, [pc, #860]	; (80034f8 <UART_SetConfig+0x6ec>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d005      	beq.n	80031aa <UART_SetConfig+0x39e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4ad6      	ldr	r2, [pc, #856]	; (80034fc <UART_SetConfig+0x6f0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 80d1 	bne.w	800334c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80031aa:	f7ff f971 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 80031ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	469a      	mov	sl, r3
 80031b4:	f04f 0b00 	mov.w	fp, #0
 80031b8:	46d0      	mov	r8, sl
 80031ba:	46d9      	mov	r9, fp
 80031bc:	eb18 0308 	adds.w	r3, r8, r8
 80031c0:	eb49 0409 	adc.w	r4, r9, r9
 80031c4:	4698      	mov	r8, r3
 80031c6:	46a1      	mov	r9, r4
 80031c8:	eb18 080a 	adds.w	r8, r8, sl
 80031cc:	eb49 090b 	adc.w	r9, r9, fp
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031e4:	4688      	mov	r8, r1
 80031e6:	4691      	mov	r9, r2
 80031e8:	eb1a 0508 	adds.w	r5, sl, r8
 80031ec:	eb4b 0609 	adc.w	r6, fp, r9
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	0094      	lsls	r4, r2, #2
 8003204:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003208:	008b      	lsls	r3, r1, #2
 800320a:	461a      	mov	r2, r3
 800320c:	4623      	mov	r3, r4
 800320e:	4628      	mov	r0, r5
 8003210:	4631      	mov	r1, r6
 8003212:	f7fc ffdf 	bl	80001d4 <__aeabi_uldivmod>
 8003216:	4603      	mov	r3, r0
 8003218:	460c      	mov	r4, r1
 800321a:	461a      	mov	r2, r3
 800321c:	4bb8      	ldr	r3, [pc, #736]	; (8003500 <UART_SetConfig+0x6f4>)
 800321e:	fba3 2302 	umull	r2, r3, r3, r2
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	469b      	mov	fp, r3
 800322c:	f04f 0c00 	mov.w	ip, #0
 8003230:	46d9      	mov	r9, fp
 8003232:	46e2      	mov	sl, ip
 8003234:	eb19 0309 	adds.w	r3, r9, r9
 8003238:	eb4a 040a 	adc.w	r4, sl, sl
 800323c:	4699      	mov	r9, r3
 800323e:	46a2      	mov	sl, r4
 8003240:	eb19 090b 	adds.w	r9, r9, fp
 8003244:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800325c:	4689      	mov	r9, r1
 800325e:	4692      	mov	sl, r2
 8003260:	eb1b 0509 	adds.w	r5, fp, r9
 8003264:	eb4c 060a 	adc.w	r6, ip, sl
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	f04f 0400 	mov.w	r4, #0
 800327a:	0094      	lsls	r4, r2, #2
 800327c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003280:	008b      	lsls	r3, r1, #2
 8003282:	461a      	mov	r2, r3
 8003284:	4623      	mov	r3, r4
 8003286:	4628      	mov	r0, r5
 8003288:	4631      	mov	r1, r6
 800328a:	f7fc ffa3 	bl	80001d4 <__aeabi_uldivmod>
 800328e:	4603      	mov	r3, r0
 8003290:	460c      	mov	r4, r1
 8003292:	461a      	mov	r2, r3
 8003294:	4b9a      	ldr	r3, [pc, #616]	; (8003500 <UART_SetConfig+0x6f4>)
 8003296:	fba3 1302 	umull	r1, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2164      	movs	r1, #100	; 0x64
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	3332      	adds	r3, #50	; 0x32
 80032a8:	4a95      	ldr	r2, [pc, #596]	; (8003500 <UART_SetConfig+0x6f4>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b4:	4498      	add	r8, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	469b      	mov	fp, r3
 80032ba:	f04f 0c00 	mov.w	ip, #0
 80032be:	46d9      	mov	r9, fp
 80032c0:	46e2      	mov	sl, ip
 80032c2:	eb19 0309 	adds.w	r3, r9, r9
 80032c6:	eb4a 040a 	adc.w	r4, sl, sl
 80032ca:	4699      	mov	r9, r3
 80032cc:	46a2      	mov	sl, r4
 80032ce:	eb19 090b 	adds.w	r9, r9, fp
 80032d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032d6:	f04f 0100 	mov.w	r1, #0
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032ea:	4689      	mov	r9, r1
 80032ec:	4692      	mov	sl, r2
 80032ee:	eb1b 0509 	adds.w	r5, fp, r9
 80032f2:	eb4c 060a 	adc.w	r6, ip, sl
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4619      	mov	r1, r3
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	f04f 0400 	mov.w	r4, #0
 8003308:	0094      	lsls	r4, r2, #2
 800330a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800330e:	008b      	lsls	r3, r1, #2
 8003310:	461a      	mov	r2, r3
 8003312:	4623      	mov	r3, r4
 8003314:	4628      	mov	r0, r5
 8003316:	4631      	mov	r1, r6
 8003318:	f7fc ff5c 	bl	80001d4 <__aeabi_uldivmod>
 800331c:	4603      	mov	r3, r0
 800331e:	460c      	mov	r4, r1
 8003320:	461a      	mov	r2, r3
 8003322:	4b77      	ldr	r3, [pc, #476]	; (8003500 <UART_SetConfig+0x6f4>)
 8003324:	fba3 1302 	umull	r1, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2164      	movs	r1, #100	; 0x64
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	3332      	adds	r3, #50	; 0x32
 8003336:	4a72      	ldr	r2, [pc, #456]	; (8003500 <UART_SetConfig+0x6f4>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4442      	add	r2, r8
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	e0d0      	b.n	80034ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7ff f88c 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003350:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	469a      	mov	sl, r3
 8003356:	f04f 0b00 	mov.w	fp, #0
 800335a:	46d0      	mov	r8, sl
 800335c:	46d9      	mov	r9, fp
 800335e:	eb18 0308 	adds.w	r3, r8, r8
 8003362:	eb49 0409 	adc.w	r4, r9, r9
 8003366:	4698      	mov	r8, r3
 8003368:	46a1      	mov	r9, r4
 800336a:	eb18 080a 	adds.w	r8, r8, sl
 800336e:	eb49 090b 	adc.w	r9, r9, fp
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800337e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003382:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003386:	4688      	mov	r8, r1
 8003388:	4691      	mov	r9, r2
 800338a:	eb1a 0508 	adds.w	r5, sl, r8
 800338e:	eb4b 0609 	adc.w	r6, fp, r9
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4619      	mov	r1, r3
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	0094      	lsls	r4, r2, #2
 80033a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033aa:	008b      	lsls	r3, r1, #2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	4631      	mov	r1, r6
 80033b4:	f7fc ff0e 	bl	80001d4 <__aeabi_uldivmod>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	461a      	mov	r2, r3
 80033be:	4b50      	ldr	r3, [pc, #320]	; (8003500 <UART_SetConfig+0x6f4>)
 80033c0:	fba3 2302 	umull	r2, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	469b      	mov	fp, r3
 80033ce:	f04f 0c00 	mov.w	ip, #0
 80033d2:	46d9      	mov	r9, fp
 80033d4:	46e2      	mov	sl, ip
 80033d6:	eb19 0309 	adds.w	r3, r9, r9
 80033da:	eb4a 040a 	adc.w	r4, sl, sl
 80033de:	4699      	mov	r9, r3
 80033e0:	46a2      	mov	sl, r4
 80033e2:	eb19 090b 	adds.w	r9, r9, fp
 80033e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033fe:	4689      	mov	r9, r1
 8003400:	4692      	mov	sl, r2
 8003402:	eb1b 0509 	adds.w	r5, fp, r9
 8003406:	eb4c 060a 	adc.w	r6, ip, sl
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	0094      	lsls	r4, r2, #2
 800341e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	461a      	mov	r2, r3
 8003426:	4623      	mov	r3, r4
 8003428:	4628      	mov	r0, r5
 800342a:	4631      	mov	r1, r6
 800342c:	f7fc fed2 	bl	80001d4 <__aeabi_uldivmod>
 8003430:	4603      	mov	r3, r0
 8003432:	460c      	mov	r4, r1
 8003434:	461a      	mov	r2, r3
 8003436:	4b32      	ldr	r3, [pc, #200]	; (8003500 <UART_SetConfig+0x6f4>)
 8003438:	fba3 1302 	umull	r1, r3, r3, r2
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	2164      	movs	r1, #100	; 0x64
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	3332      	adds	r3, #50	; 0x32
 800344a:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <UART_SetConfig+0x6f4>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003456:	4498      	add	r8, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	469b      	mov	fp, r3
 800345c:	f04f 0c00 	mov.w	ip, #0
 8003460:	46d9      	mov	r9, fp
 8003462:	46e2      	mov	sl, ip
 8003464:	eb19 0309 	adds.w	r3, r9, r9
 8003468:	eb4a 040a 	adc.w	r4, sl, sl
 800346c:	4699      	mov	r9, r3
 800346e:	46a2      	mov	sl, r4
 8003470:	eb19 090b 	adds.w	r9, r9, fp
 8003474:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003484:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003488:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800348c:	4689      	mov	r9, r1
 800348e:	4692      	mov	sl, r2
 8003490:	eb1b 0509 	adds.w	r5, fp, r9
 8003494:	eb4c 060a 	adc.w	r6, ip, sl
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4619      	mov	r1, r3
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	f04f 0400 	mov.w	r4, #0
 80034aa:	0094      	lsls	r4, r2, #2
 80034ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034b0:	008b      	lsls	r3, r1, #2
 80034b2:	461a      	mov	r2, r3
 80034b4:	4623      	mov	r3, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	4631      	mov	r1, r6
 80034ba:	f7fc fe8b 	bl	80001d4 <__aeabi_uldivmod>
 80034be:	4603      	mov	r3, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <UART_SetConfig+0x6f4>)
 80034c6:	fba3 1302 	umull	r1, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2164      	movs	r1, #100	; 0x64
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	3332      	adds	r3, #50	; 0x32
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <UART_SetConfig+0x6f4>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4442      	add	r2, r8
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	e7ff      	b.n	80034ee <UART_SetConfig+0x6e2>
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f8:	40011000 	.word	0x40011000
 80034fc:	40011400 	.word	0x40011400
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	4e0d      	ldr	r6, [pc, #52]	; (800353c <__libc_init_array+0x38>)
 8003508:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350a:	1ba4      	subs	r4, r4, r6
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	2500      	movs	r5, #0
 8003510:	42a5      	cmp	r5, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	4e0b      	ldr	r6, [pc, #44]	; (8003544 <__libc_init_array+0x40>)
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <__libc_init_array+0x44>)
 8003518:	f000 f820 	bl	800355c <_init>
 800351c:	1ba4      	subs	r4, r4, r6
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	2500      	movs	r5, #0
 8003522:	42a5      	cmp	r5, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352c:	4798      	blx	r3
 800352e:	3501      	adds	r5, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003536:	4798      	blx	r3
 8003538:	3501      	adds	r5, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	080035ac 	.word	0x080035ac
 8003540:	080035ac 	.word	0x080035ac
 8003544:	080035ac 	.word	0x080035ac
 8003548:	080035b0 	.word	0x080035b0

0800354c <memset>:
 800354c:	4402      	add	r2, r0
 800354e:	4603      	mov	r3, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_init>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	bf00      	nop
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr

08003568 <_fini>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr
